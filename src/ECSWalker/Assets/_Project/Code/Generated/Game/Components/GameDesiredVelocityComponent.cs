//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherDesiredVelocity;

    public static Entitas.IMatcher<GameEntity> DesiredVelocity {
        get {
            if (_matcherDesiredVelocity == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.DesiredVelocity);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherDesiredVelocity = matcher;
            }

            return _matcherDesiredVelocity;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public ECSWalker.Gameplay.Movement.DesiredVelocity desiredVelocity { get { return (ECSWalker.Gameplay.Movement.DesiredVelocity)GetComponent(GameComponentsLookup.DesiredVelocity); } }
    public UnityEngine.Vector3 DesiredVelocity { get { return desiredVelocity.Value; } }
    public bool hasDesiredVelocity { get { return HasComponent(GameComponentsLookup.DesiredVelocity); } }

    public GameEntity AddDesiredVelocity(UnityEngine.Vector3 newValue) {
        var index = GameComponentsLookup.DesiredVelocity;
        var component = (ECSWalker.Gameplay.Movement.DesiredVelocity)CreateComponent(index, typeof(ECSWalker.Gameplay.Movement.DesiredVelocity));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceDesiredVelocity(UnityEngine.Vector3 newValue) {
        var index = GameComponentsLookup.DesiredVelocity;
        var component = (ECSWalker.Gameplay.Movement.DesiredVelocity)CreateComponent(index, typeof(ECSWalker.Gameplay.Movement.DesiredVelocity));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveDesiredVelocity() {
        RemoveComponent(GameComponentsLookup.DesiredVelocity);
        return this;
    }
}
